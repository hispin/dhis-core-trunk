--Author: Jason P. --This code is a series of functions used to create a report to characterize --data submission rates for a particular time period using the DHIS 2 database. 

--create a type to hold the desired 
CREATE TYPE AS(
sourceid integer,
periodid integer, 
datasetid integer,
submittedcount bigint,
expectedcount bigint);



-- Function: monthly_facility_data_submissions_onemonth(integer)
--This function will return a record set of submitted and expected data submissions for each level4 unit. 
--To do. Should be generalized for any particular organizational unit. 
-- DROP FUNCTION monthly_facility_data_submissions_onemonth(integer);

CREATE OR REPLACE FUNCTION monthly_facility_data_submissions_onemonth(myperiod integer)
RETURNS SETOF datasubmissions_type $DECLARE 
rec record;
FOR rec in (
SELECT orgunitstructure.idlevel4 as sourceid, submitted.periodid, submitted.datasetid, submitted.submitteddatacount , expected.expected as expectedcount from orgunitstructure JOIN 
--begin the join of the actual (SELECT count(datavalue.value) as submitteddatacount, datavalue.sourceid, datavalue.periodid, datasetmembers.datasetid from datavalue datavalue 
JOIN datasetmembers datasetmembers on datasetmembers.dataelementid = datavalue.--accept a single paramater, and use this to select out all records for the desired time where datavalue.periodid = $GROUP BY datavalue.sourceid, datavalue.periodid, datasetmembers.datasetid) as submitted --only worry about orgunits with a level4 --TO DO: The function should probably extended to accept different hierarchy submitted.sourceid = orgunitstructure.--Start the join of expected dataelements for the ones that were actually (SELECT count(datasetmembers.dataelementid) as expected, datasetmembers.datasetid 
FROM datasetmembers GROUP BY datasetmembers.datasetid )
expected on 
expected.datasetid = submitted.datasetid 
where orgunitstructure.idlevel4 IS NOT NULL 
--Start the union of facilities that did not submitted anything, returning a set of --records with expected 
SELECT nonsubmitters.sourceid, $1 as periodid, nonsubmitters.datasetid, NULL::bigint as submittedcount , expected.expected as expectedcount FROM (
SELECT DISTINCT datasetsource.sourceid, datasetsource.datasetid from datasetsource SELECT DISTINCT datavalue.sourceid, datasetmembers.datasetid from datavalue JOIN datasetmembers datasetmembers ON datasetmembers.dataelementid = datavalue.where datavalue.periodid = $AND datavalue.sourceid IN (SELECT DISTINCT idlevel4 from orgunitstructure where idlevel4 is not null)) as (SELECT count(datasetmembers.dataelementid) as expected, datasetmembers.datasetid 
FROM datasetmembers GROUP BY datasetmembers.datasetid)
expected on 
expected.datasetid = nonsubmitters.datasetid 
ORDER BY sourceid, periodid, datasetid )
RETURN NEXT rec;
END LOOP;
END;
$BODY--TODO: There are no procedureal elements in this function. Alter language to SQL. 
LANGUAGE 'plpgsql' COST ROWS 1000;
ALTER FUNCTION monthly_facility_data_submissions_onemonth(integer) OWNER TO dhis;





-- Function: monthly_facility_data_submissions_timeperiods(integer, integer)
--THis is a helper function to determine the actual periods between the 
--periods provided as report paramaters. 
--TO DO: Error checking to ensure that startperiod <= --TO DO: periodtype ID is hardcoded and refers to an integer. Should replace with some other mechanism to --TO DO: It is not safe to assume that periods are necessarily sequential. This function should accept date types, and return a set of period ids. 
--either the desired type of periodicity, or use a *~ expression to select out the monthly time period id 
-- DROP FUNCTION monthly_facility_data_submissions_timeperiods(integer, integer);

CREATE OR REPLACE FUNCTION monthly_facility_data_submissions_timeperiods(startperiod integer, endperiod integer)
RETURNS SETOF integer $
SELECT periodid from period startdate::timestamp >= (SELECT startdate from period where periodid = $1)::enddate::timestamp <= (SELECT enddate from period where periodid = $2)::AND 
periodtypeid = '8'
ORDER BY startdate;

$BODY$
LANGUAGE 'sql' COST ROWS 1000;
ALTER FUNCTION monthly_facility_data_submissions_timeperiods(integer, integer) OWNER TO dhis;




--This table will be used to house the materialized view 
--which will contain results from the monthly_facility_data_submissions_timeperiods() --procedure. 

-- Table: 
-- DROP TABLE mv_monthly_facility_data_submissions;

CREATE TABLE (
sourceid integer,
periodid integer,
datasetid integer,
submittedcount bigint,
expectedcount bigint,
id serial NOT NULL,
CONSTRAINT pk_submissions_summary PRIMARY KEY (id)
)
WITH (OIDS=FALSE);
ALTER TABLE mv_monthly_facility_data_submissions OWNER TO dhis;

-- Index: 
-- DROP INDEX idx_periodid;

CREATE INDEX ON USING (periodid);





-- Function: monthly_facility_data_submissions_by_month(integer, integer)
--this fucntion will be used to repopulate the data submissions summary table. 


-- DROP FUNCTION monthly_facility_data_submissions_by_month(integer, integer);

CREATE OR REPLACE FUNCTION monthly_facility_data_submissions_by_month(startperiod integer, endperiod integer)
RETURNS integer $BODY$

timeperiods record;

BEGIN 
--get rid of old records. 
--TO DO. Make this optional so that the table only updates new records, ignoring insert errors and updating old records. 
TRUNCATE TABLE mv_monthly_facility_data_submissions;

FOR timeperiods in SELECT monthly_facility_data_submissions_timeperiods($1, $2) 
EXECUTE 'INSERT INTO mv_monthly_facility_data_submissions SELECT * FROM monthly_facility_data_submissions_onemonth(' || timeperiods.monthly_facility_data_submissions_timeperiods || ')';

END LOOP;

RETURN 1; 

END;
$BODY$
LANGUAGE 'plpgsql' COST 100;
ALTER FUNCTION monthy_facility_data_submissions_by_month(integer, integer) OWNER TO dhis;



--The materialized view is refreshed by a select query. This could --be included in the report as an option, through the DHIS 2 interface with 
--some modification, executed manually through the PgAdmin interface,
--executed after bulk updates automatically, or scheduled to --regularly with the PgAgent. 

----SELECT * FROM monthly_facility_data_submissions_by_month(5425, 5436);