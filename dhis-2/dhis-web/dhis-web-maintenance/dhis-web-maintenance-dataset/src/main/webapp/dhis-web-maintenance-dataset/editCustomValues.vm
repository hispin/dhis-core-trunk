
<script>
/**
 * <p>Implements a sortable hashtable which accepts non-<code>null</code> String
 * keys and non-<code>null</code> values.</p>
 *
 * <p>This object is primarily intended to address the shortcomings of using an
 * Object as a hashtable, by managing the names of the properties which are
 * stored in an Object.</p>
 *
 * <p>HashTable does not define a hashing function, as Object's built-in
 * hashing is used for storing and retrieving items.</p>
 *
 * <p>Initial values are taken from any Objects passed into the constructor:
 * if another HashTable is given as an argument, its contents will be taken.</p>
 *
 * @constructor
 */
var HashTable = function()
{
   /**
    * Storage object - values are stored as properties whose names are hashtable
    * keys.
    *
    * @type Object
    * @private
    */
    this._store = {};

   /**
    * A list of hashtable keys.
    *
    * @type Array
    * @private
    */
    this._keys = [];

    for (var i = 0; i < arguments.length; i++)
    {
        this._putFromObject(arguments[i]);
    }
};

/**
 * Puts all properties from a given HashTable or Object into the hashtable.
 *
 * @param {Object} source an object whose values will be put into the hashtable.
 * @private
 */
HashTable.prototype._putFromObject = function(source)
{
    if (source.constructor == HashTable)
    {
        source.forEach(function(k, v)
        {
            this.put(k, v);
        }, this);
    }
    else
    {
        for (property in source)
        {
            if (source.hasOwnProperty(property))
            {
                this.put(property, source[property]);
            }
        }
    }
};

/**
 * Clears the hashtable.
 */
HashTable.prototype.clear = function()
{
    this._store = {};
    this._keys = [];
};

/**
 * An iterator which calls the given function, passing key, value, item index and a
 * reference to this Hashtable for each item in the hashtable.
 *
 * @param {Function} callback the function to be called for each item.
 * @param {Object} context an optional context object for the calls to block.
 *
 * @see "Enumerating Javascript Objects", http://dean.edwards.name/weblog/2006/07/enum/
 */
HashTable.prototype.forEach = function(callback, context)
{
    for (var i = 0, l = this._keys.length; i < l; i++)
    {
        callback.call(context, this._keys[i], this._store[this._keys[i]], i, this);
    }
};

/**
 * Retrieves the item with the given key.
 *
 * @param {String} key the key for the item to be retrieved.
 * @return the item stored in this HashTable with the given key if one exists,
 *         <code>null</code> otherwise.
 */
HashTable.prototype.get = function(key)
{
    var result = null;
    if (typeof(this._store[key]) != "undefined")
    {
        result = this._store[key];
    }
    return result;
};

/**
 * Determines if the hashtable contains the given key.
 *
 * @param {String} key the key to be searched for.
 * @return <code>true</code> if this HashTable contains the given key,
 *         <code>false</code> otherwise.
 * @type Boolean
 */
HashTable.prototype.hasKey = function(key)
{
    var result = false;
    this.forEach(function(k)
    {
        if (key == k)
        {
            result = true;
            return true;
        }
    });
    return result;
};

/**
 * Determines if the hashtable contains the given value.
 *
 * @param {Object} value the value to be searched for.
 * @return <code>true</code> if this HashTable contains the given value,
 *         <code>false</code> otherwise.
 * @type Boolean
 */
HashTable.prototype.hasValue = function(value)
{
    var result = false;
    this.forEach(function(k, v)
    {
        if (value == v)
        {
            result = true;
            return true;
        }
    });
    return result;
};

/**
 * Creates Object representations of the items in the hashtable.
 *
 * @return the items in the hashtable, represented as Objects with "key"
 *         and "value" properties.
 * @type Array
 */
HashTable.prototype.items = function()
{
    var items = [];
    this.forEach(function(k, v)
    {
        items.push({"key": k, "value": v});
    });
    return items;
};

/**
 * Retrieves the hashtable's keys.
 *
 * @return the hashtable's keys.
 * @type Array
 */
HashTable.prototype.keys = function()
{
    var keys = [];
    this.forEach(function(key)
    {
        keys.push(key);
    });
    return keys;
};

/**
 * Puts an item into the hashtable.
 *
 * @param {String} key the key under which the item should be stored.
 * @param {Object} value the item to be stored.
 */
HashTable.prototype.put = function(key, value)
{
    if (key == undefined || key == null || typeof(key) != "string"
        || value == undefined || value == null)
    {
        return;
    }

    if (typeof(this._store[key]) == "undefined")
    {
        this._keys.push(key);
    }

    this._store[key] = value;
};

/**
 * Removes an item from the hashtable and returns it.
 *
 * @param {String} key the key for the item to be removed.
 * @return the item which was removed, or <code>null</code> if the item did not
 *         exist.
 */
HashTable.prototype.remove = function(key)
{
    var result = null;
    for (var i = 0, l = this._keys.length; i < l; i++)
    {
        if (key == this._keys[i])
        {
            result = this._store[key];
            delete(this._store[key]);
            this._keys.splice(i, 1);
            break;
        }
    }
    return result;
};

/**
 * Determines the number of entries in the hashtable.
 *
 * @return the number of entries in this HashTable.
 * @type Number
 */
HashTable.prototype.size = function()
{
    return this._keys.length;
};

/**
 * Sorts the keys of the hashtable.
 *
 * @param {Function} comparator an optional function which will be used to sort
 *                              the keys - if not provided, they will be sorted
 *                              lexographically (in dictionary order).
 */
HashTable.prototype.sort = function(comparator)
{
    if (typeof(comparator) == "function")
    {
        this._keys.sort(comparator);
    }
    else
    {
        this._keys.sort();
    }
};

/**
 * Creates a String representation of the hashtable.
 *
 * @return a String representation of this {@link HashTable}.
 * @type String
 */
HashTable.prototype.toString = function()
{
    var result = "{";
    this.forEach(function(key, value, index)
    {
        if (index != 0)
        {
            result += ", ";
        }
        result += key + ": " + value;
    });
    result += "}";
    return result;
};

/**
 * Updates the hashtable with the values contained in a given {@link HashTable}
 * or Object.
 *
 * @param {Object} source an object whose values will be put into the hashtable.
 */
HashTable.prototype.update = function(source)
{
    this._putFromObject(source);
};

/**
 * Retrieves the hashtable's values.
 *
 * @return the hashtable's values.
 * @type Array
 */
HashTable.prototype.values = function()
{
    var values = [];
    this.forEach(function(key, value)
    {
        values.push(value);
    });
    return values;
};
</script>

<script type="text/javascript">
	
// -----------------------------------------------------------------------------
// Find Selected DataElement Count in the DataEntryForm
// -----------------------------------------------------------------------------

function findDataElementCount()
{
  var request = new Request();
  request.setResponseTypeXML( 'dataSet' );
  request.setCallbackSuccess( findDataElementCountCompleted );

  // Clear the list
  var dataElementList = document.getElementById( 'dataElementSelector' );
  dataElementList.options.length = 0;

  var requestString = 'getSelectedDataElements.action';
  
  var params = 'dataSetId=' + document.getElementById( 'dataSetIdField' ).value;
        
  params += '&designCode=' + htmlCode;
  
  request.sendAsPost( params );
  request.send( requestString );

  return false;
}

function findDataElementCountCompleted( dataSetElement )
{
  var dataElements = dataSetElement.getElementsByTagName( 'dataElements' )[0];
  var dataElementList = dataElements.getElementsByTagName( 'dataElement' );

  var dataElementSelector = document.getElementById( 'dataElementSelector' );
  
  for ( var i = 0; i < dataElementList.length; i++ )
  {
    var dataElement = dataElementList[i];
    var name = dataElement.firstChild.nodeValue;
    var id = dataElement.getAttribute( 'id' );  
        
    var option = new Option( name, id );
        
    dataElementSelector.add( option, null );
  }
  
  if( dataElementList.length <=0 )
  {
    setMessage( "No more elements to select" ); //?  
//    window.parent.SetOkButton( false ) ;
  }
  else
  {
    hideMessage();
//    window.parent.SetOkButton( true ) ;
  }
}

// -----------------------------------------------------------------------------
// Get OptionCombos of a selected DataElement
// -----------------------------------------------------------------------------
function getOptionCombos()
{
  var request = new Request();
  request.setResponseTypeXML( 'optionCombo' );
  request.setCallbackSuccess( getOptionCombosCompleted );
  
  var dataElementSelector = document.getElementById( 'dataElementSelector' );
  var dataElementId = dataElementSelector.options[dataElementSelector.selectedIndex].value;
  
  // Clear the OptionCombo list
  var optionComboList = document.getElementById( 'optionComboSelector' );
  optionComboList.options.length = 0;

  // Clear the customValue list
  var customValueList = document.getElementById( 'customValueSelector' );
  customValueList.options.length = 0;  
  
  var requestString = 'getOptionCombos.action';
  
  var params = 'dataElementId=' + dataElementId;  

  request.sendAsPost( params );
  request.send( requestString );

  return false;
}

function getOptionCombosCompleted( optionComboElement )
{
  var categoryOptions = optionComboElement.getElementsByTagName( 'categoryOptions' )[0];
  var optionsList = optionComboElement.getElementsByTagName( 'categoryOption' );

  var optionComboSelector = document.getElementById( 'optionComboSelector' );
  
  for ( var i = 0; i < optionsList.length; i++ )
  {
    var categoryOption = optionsList[i];
    var name = categoryOption.firstChild.nodeValue;
    var id = categoryOption.getAttribute( 'id' );   
        
    var option = new Option( name, id );
        
    optionComboSelector.add( option, null );
  }
  
  var messageContainer = document.getElementById('message');
  if( (optionsList.length ==1 &&  optionsList[0]=="NULL") || (optionsList.length ==0) )
  {
    setMessage( "No more categories to select" ); //?   
    //window.parent.SetOkButton( false ) ;
  }
  else
  {
    hideMessage();  
//    window.parent.SetOkButton( true ) ;
  }
}



// -----------------------------------------------------------------------------
// Set CustomValues of a selected OptionCombo
// -----------------------------------------------------------------------------

function getCustomValuesCompleted( customValueElement )
{
  var custom_Values = customValueElement.getElementsByTagName( 'customValues' )[0];
  var custom_ValueList = customValueElement.getElementsByTagName( 'customValue' );

  var customValueSelector = document.getElementById( 'customValueSelector' );
  
  for ( var i = 0; i < custom_ValueList.length; i++ )
  {
    var custom_ValueOption = custom_ValueList[i];
    var name = custom_ValueOption.firstChild.nodeValue;
    var id = custom_ValueOption.getAttribute( 'id' );   
        
    var option = new Option( name, id );
        
    customValueSelector.add( option, null );
  }
    
  //here add if single value dissable and make the only element selected
  
  if( (custom_ValueList.length ==1 &&  custom_ValueList[0]=="NULL") || (custom_ValueList.length ==0) )
  {
    setMessage( "No more categories to select" ); //?   
  }
  else
  {
    hideMessage();  
  }
}

// -----------------------------------------------------------------------------
// Add/Delete/Get CustomValues of a selected OptionCombo
// -----------------------------------------------------------------------------
function getCustomValues(operation)
{
  var request = new Request();
  request.setResponseTypeXML( 'customValue' );
  request.setCallbackSuccess( getCustomValuesCompleted );
  
  var dataElementSelector = document.getElementById( 'dataElementSelector' );
  var dataElementId = dataElementSelector.options[dataElementSelector.selectedIndex].value;
  
  var optionComboSelector = document.getElementById( 'optionComboSelector' );
  var categoryoptioncomboid = optionComboSelector.options[optionComboSelector.selectedIndex].value;

  if(operation=='delete')
  {
  var customValueSelector = document.getElementById( 'customValueSelector' );
  var customValueId = customValueSelector.options[customValueSelector.selectedIndex].value;
  }
  
  // Clear the customValue list
  var customValueList = document.getElementById( 'customValueSelector' );
  customValueList.options.length = 0;

  var requestString = 'getCustomValues.action';
  
  var params = 'dataElementId=' + dataElementId;
  var params = params + '&categoryOptionComboId='+categoryoptioncomboid;  
  var params = params + '&dataSetId='+ document.getElementById( 'dataSetIdField' ).value;
  var params = params + '&operation='+operation;
  var params = params + '&value='+ document.getElementById( 'newCustomValue' ).value;
  
  if(operation=='delete')
  {
  var params = params + '&customValueId='+customValueId;
  }
  
  request.sendAsPost( params );
  request.send( requestString );

  return false;
}


//get suggestions for custom value
function getSuggestedCustomValuesCompleted( customValueElement )
{
  var custom_Values = customValueElement.getElementsByTagName( 'customValues' )[0];
  var custom_ValueList = customValueElement.getElementsByTagName( 'customValue' );

  var availableCustomValue = document.getElementById( 'availableCustomValue' );
  
  for ( var i = 0; i < custom_ValueList.length; i++ )
  {
    var custom_ValueOption = custom_ValueList[i];
    var name = custom_ValueOption.firstChild.nodeValue;
    var id = custom_ValueOption.getAttribute( 'id' );   
        
    var option = new Option( name, name );
        
    availableCustomValue.add( option, null );
  }
    
  //here add if single value dissable and make the only element selected
  
  if( (custom_ValueList.length ==1 &&  custom_ValueList[0]=="NULL") || (custom_ValueList.length ==0) )
  {
    hideMessage();
  }
  else
  {
    hideMessage();   
  }
}

// -----------------------------------------------------------------------------
// Get Suggested CustomValues for typed chars
// -----------------------------------------------------------------------------
function getSuggestedCustomValues(operation)
{
  var request = new Request();
  request.setResponseTypeXML( 'customValue' );
  request.setCallbackSuccess( getSuggestedCustomValuesCompleted );
  
  var dataElementSelector = document.getElementById( 'dataElementSelector' );
  var dataElementId = dataElementSelector.options[dataElementSelector.selectedIndex].value;
  
  var optionComboSelector = document.getElementById( 'optionComboSelector' );
  var categoryoptioncomboid = optionComboSelector.options[optionComboSelector.selectedIndex].value;

  if(operation=='delete')
  {
  var customValueSelector = document.getElementById( 'customValueSelector' );
  var customValueId = customValueSelector.options[customValueSelector.selectedIndex].value;
  }
  
  // Clear the suggestedcustomValue list
  var availableCustomValueList = document.getElementById( 'availableCustomValue' );
  availableCustomValueList.options.length = 0;

  var requestString = 'getCustomValues.action';
  
  var params = 'dataElementId=' + dataElementId;
  var params = params + '&categoryOptionComboId='+categoryoptioncomboid;  
  var params = params + '&dataSetId='+ document.getElementById( 'dataSetIdField' ).value;
  var params = params + '&operation='+operation;
  var params = params + '&value='+ document.getElementById( 'newCustomValue' ).value;
  
  if(operation=='delete')
  {
  var params = params + '&customValueId='+customValueId;
  }
  
  request.sendAsPost( params );
  request.send( requestString );

  return false;
}

function addNew()
{
  if (document.getElementById( 'optionComboSelector' ).selectedIndex==-1 || document.getElementById( 'dataElementSelector' )==-1) 
  {
    setMessage("You must make a selection from the Data element and Combo options panels first");
  }
  else if(document.getElementById( 'newCustomValue' ).value=='')
  {
    setMessage("Custom value must be entered" );
  }
  else
  {
    var isDuplicate='false';
    var selectobject=document.getElementById( 'customValueSelector' );
    var newValue = document.getElementById( 'newCustomValue' ).value;
  
    for (var i=0; i<selectobject.length; i++)
    {
      if(selectobject.options[i].text==newValue)
      {
        isDuplicate='true';
      }
    }
    
    if(isDuplicate=='true')
    {
      setMessage("Duplicates are not allowed");
    }
    else
    {
      getCustomValues('add');
    } 
  }
}

function remove()
{
  if (document.getElementById( 'dataElementSelector' )==-1) 
  {
    setMessage("You must make a selection from the data element panel first");
  }
  else if (document.getElementById( 'optionComboSelector' ).selectedIndex==-1) 
  {
    setMessage("You must make a selection from the Combo options panel first");
  }
  else if (document.getElementById( 'customValueSelector' ).selectedIndex==-1) 
  {
    setMessage("You must make a selection from the Custom values panel first");
  }
  else
  {
    getCustomValues('delete');
  } 
}

function findSimilar()
{
  if(document.getElementById( 'newCustomValue' ).value.length>1)
  {
    getSuggestedCustomValues('find');
  }
  else
  {
    // Clear the suggestedcustomValue list
    var availableCustomValueList = document.getElementById( 'availableCustomValue' );
    availableCustomValueList.options.length = 0;
  }
}
	
function setSuggestedCustomValue()
{
  var availableCustomValue = document.getElementById( 'availableCustomValue' );
  var availableCustomValueSelected = availableCustomValue.options[availableCustomValue.selectedIndex].value;
  
  document.getElementById( 'newCustomValue' ).value = availableCustomValueSelected;
}

</script>

<style type="text/css">
h4 {
    font-family: arial, sans-serif;
    font-size: 12px;
    margin: 15px 0 5px 0;
    }
</style>

<h3>$i18n.getString( "manage_custom_values" )</h3>

<table>
	<col> ## selectdataelement
	<col> ## select_optioncombo
<thead>
  <tr>
    <th>$i18n.getString( "selectdataelement" )</th>
	<th>$i18n.getString( "select_optioncombo" )</th>
  </tr>
</thead>
<tbody>
    <tr>
        <td>
            <select name="dataElementSelector" id="dataElementSelector" onchange="getOptionCombos()" style="min-width:25em" size="10">            
                #foreach($dataElement in $dataElements)
                    <option  value="$dataElement.id">$dataElement.name</option>
                #end 
            </select>
                
        </td>
        <td>
            <select name="optionComboSelector" id="optionComboSelector"  onchange="getCustomValues('get')" style="min-width:25em" size="10">
            </select>
        </td>
    </tr>                       
    <tr>
        <td><input type="text" name="newCustomValue" id="newCustomValue" onkeydown="findSimilar()" maxlength="160" style="min-width:25em" size="60"/>&nbsp;&nbsp;
        </td>
        <td>
            <button type="button" onclick="addNew()">$i18n.getString( "add_new_custom_value" )</button> &nbsp;
            #openHelp( "dhis-web-maintenance-dataset.datasetcustomvalue" )
        </td>
    </tr>
 </tbody>
 </table> 
 
<table>
	<col> ## available_customvalue
	<col> ## select_customvalue
<thead>
  <tr>
    <th>$i18n.getString( "available_customvalue" )</th>
    <th>$i18n.getString( "select_customvalue" )</th>
  </tr>
</thead>
<tbody>
    <tr>  
        <td>
            <select name="availableCustomValue" id="availableCustomValue" onchange="setSuggestedCustomValue()" style="min-width:25em" size="10">
            </select>
        </td>                  
        <td>
            <select name="customValueSelector" id="customValueSelector" style="min-width:25em" size="10">
            </select>
        </td>
    </tr>            
</tbody>
</table>
      
<table>
<tbody>        
    <tr>
        <td>
            <input type="button" onclick="remove()" value="$i18n.getString( "delete_custom_value" )" style="width:10em">
            <input type="button" onclick="window.location.href='dataSet.action'" value="$i18n.getString( "done_custom_value" )" style="width:10em">                
        </td>
    </tr> 
</tbody>
</table>                                  

<span id="message"></span>
<input type="hidden" name="dataSetIdField" id="dataSetIdField" value="$dataSet.id">
