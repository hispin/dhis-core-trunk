package require tcltest
namespace import ::tcltest::*

lappend auto_path mydatamart.vfs/libext
lappend auto_path mydatamart.vfs/libdhis

namespace eval starkit {}

package require excel

${::excel::log}::setlevel debug
${::xslt::log}::setlevel debug

${::excel::log}::debug "Hello from the logger"

set ::dhis(dbfile) utest.Dmart

file mkdir "temp_test"

test init "Initializing" -body {
    set starkit::topdir mydatamart.vfs
    source mydatamart.vfs/appinit.tcl
    excel::init "temp_test" \
	"mydatamart.vfs/resource/extbin/zip.exe" \
	"mydatamart.vfs/resource/extbin/unzip.exe"

    file exists [file join "temp_test" "excel"]
} -result 1

test hasNoConnections "Testing for presence of connections.xml" -body {
    excel::hasConnections unittests/blank.xlsx
} -result false

test hasConnections "Testing for presence of connections.xml" -body {
    excel::hasConnections [file join unittests test.xlsx]
} -result true

test unpack "Unpacking xlsx" -body {
    set resdir [excel::unpack unittests/blank.xlsx]
    file exists [file join $resdir xl]
} -result 1

test pack "packing xlsx" -body {
    set resdir [excel::unpack unittests/blank.xlsx]
    excel::pack $resdir unittests/temp.xlsx
    file exists unittests/temp.xlsx
} -result 1

test makeConnections "creating new connections" -body {
    set views [list view1 view2 view3]
    set res [string trim [excel::createConnections mydbfile $views] ]
} -result "<?xml version='1.0' encoding='UTF-8' standalone='yes'?>
<connections xmlns='http://schemas.openxmlformats.org/spreadsheetml/2006/main'>
<connection id='1' name='view1' description='' type='1' refreshedVersion='1' saveData='1'><dbPr connection='DRIVER=SQLite3 ODBC Driver;Database=mydbfile;StepAPI=0;SyncPragma=;NoTXN=0;Timeout=;ShortNames=0;LongNames=0;NoCreat=1;NoWCHAR=1;FKSupport=0;JournalMode=;LoadExt=;' command='SELECT * FROM view1' /></connection>
<connection id='2' name='view2' description='' type='1' refreshedVersion='1' saveData='1'><dbPr connection='DRIVER=SQLite3 ODBC Driver;Database=mydbfile;StepAPI=0;SyncPragma=;NoTXN=0;Timeout=;ShortNames=0;LongNames=0;NoCreat=1;NoWCHAR=1;FKSupport=0;JournalMode=;LoadExt=;' command='SELECT * FROM view2' /></connection>
<connection id='3' name='view3' description='' type='1' refreshedVersion='1' saveData='1'><dbPr connection='DRIVER=SQLite3 ODBC Driver;Database=mydbfile;StepAPI=0;SyncPragma=;NoTXN=0;Timeout=;ShortNames=0;LongNames=0;NoCreat=1;NoWCHAR=1;FKSupport=0;JournalMode=;LoadExt=;' command='SELECT * FROM view3' /></connection>
</connections>"

test makeBlank "creating blank file with connections" -body {
    set views [list pivotsource_indicator_ou3_m pivotsource_indicator_ou3_y pivotsource_indicator_ou3_q]
    excel::createBlankWithViews unittest.xlsx $::dhis(dbfile) $views
    return 0
} -result 0

test resetConnections "resetting connections" -body {
    excel::alterConnections unittest.xlsx $::dhis(dbfile)
    set res 0
} -result 0

test cleanup "Cleaning up" -body {
    excel::cleanup 
    file exists [file join "temp_test" "excel"]
} -result 0

cleanupTests


